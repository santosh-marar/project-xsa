model Coupon {
  id              String     @id @default(ulid())
  shopId          String
  discountId      String
  code            String     @unique
  description     String?
  usageLimit      Int?
  usageCount      Int        @default(0)
  perUserLimit    Int?       // New: Limits per customer
  isActive        Boolean    @default(true)
  createdBy       String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  startDate       DateTime   @default(now())
  endDate         DateTime?
  minOrderValue   Float?     // New: Minimum cart value requirement
  customerEligibility CustomerEligibility? // New: enum for targeting

  discount        Discount   @relation(fields: [discountId], references: [id], onDelete: Cascade)
  shop            Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)
  couponUsages    CouponUsage[]
  couponCustomers CouponCustomer[] // New: For targeted campaigns

  @@unique([shopId, code])
  @@index([code, isActive, startDate, endDate]) // Better query performance
}

enum CustomerEligibility {
  ALL_CUSTOMERS
  NEW_CUSTOMERS
  RETURNING_CUSTOMERS
  HIGH_VALUE
  SEGMENT_SPECIFIC
}

// For targeted coupon campaigns
model CouponCustomer {
  id        String   @id @default(ulid())
  couponId  String
  userId    String

  coupon    Coupon   @relation(fields: [couponId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([couponId, userId])
}

model CouponUsage {
  id          String   @id @default(ulid())
  couponId    String
  orderId     String
  userId      String
  amountSaved Float
  appliedAt   DateTime @default(now()) // New: Exact application time

  coupon      Coupon   @relation(fields: [couponId], references: [id])
  order       Order    @relation(fields: [orderId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([couponId, orderId])
  @@index([userId]) // Faster user-specific queries
}